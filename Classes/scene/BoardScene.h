// BoardScene.h
#ifndef __BOARD_SCENE_H__
#define __BOARD_SCENE_H__

#include "cocos2d.h"
#include "network/Photon_Lib.h"
#include "network/CocosUIListener.h" 
#include "network/CustomEventCodes.h"
#include "players/player.h"
#include "../card/ALLCard.h"
#include <cstdint> 
#include <vector>
#include <map>
USING_NS_CC;

class cardSprite : public cocos2d::Sprite {
public:
    cardSprite(std::shared_ptr<CardBase> card) : card(card) {
        std::string str = "cards/" + std::to_string(card->dbfId);
        str += ".png";
        this->initWithFile(str);
    }

    static cardSprite* create(std::shared_ptr<CardBase> card) {
        // 创建对象
        cardSprite* sprite = new (std::nothrow) cardSprite(card);
        if (sprite && sprite->init()) {
            // 如果初始化成功，将对象加入自动释放池
            sprite->autorelease();
            return sprite;
        }
        // 如果初始化失败，删除对象并返回 nullptr
        CC_SAFE_DELETE(sprite);
        return nullptr;
    }

public:
    std::shared_ptr<CardBase> card;
};

class BoardScene : public cocos2d::Scene
{
public:
    // 创建场景的静态方法
    static cocos2d::Scene* createScene();

    // 初始化方法
    virtual bool init();

    // 事件处理
    void onPhotonEvent(int eventCode, const ExitGames::Common::Hashtable& parameters);

    // 创建宏
    CREATE_FUNC(BoardScene);

private:
    // Photon 和 UI 相关
    PhotonLib* photonLib;
    CocosUIListener* cocosUIListener;

    // UI 元素
    cocos2d::DrawNode* dropArea;

    // 本地玩家
    int localPlayerNumber;

    players::Player* player1;
    players::Player* player2;

    int currentPlayerNumber;
    bool isLocalPlayerTurn;   // 当前回合是否属于本地玩家

    bool initialHandsDistributed = false;
    bool handsInitialized = false;

    // 手牌管理
    std::vector<cardSprite*> localPlayerCards; // 手中的卡牌
    std::map<cardSprite*, cocos2d::Vec2> cardOriginalPositions; // 卡牌的原始位置
    std::vector<cardSprite*> localplayedCards;        // 本地玩家已打出的卡牌
    std::vector<cardSprite*> oppentplayedCards;        // 对方玩家已打出的卡牌

    // 当前选中的卡牌
    //cocos2d::Sprite* selectedCard;
    //cocos2d::Sprite* hoveredCard;
    cardSprite* selectedCard;
    cardSprite* hoveredCard;

    // 玩家信息 UI
    cocos2d::Label* localPlayerHealth;
    cocos2d::Label* localPlayerMana;
    cocos2d::Label* opponentPlayerHealth;
    cocos2d::Label* opponentPlayerMana;
    cocos2d::Label* turnIndicator;

    // 回合结束按钮
    cocos2d::MenuItemImage* endTurnButton;

    //////////////////////////
    //std::map<cocos2d::Sprite*, std::shared_ptr<CardBase>> cardMap; // 卡牌精灵和卡牌对象的映射
    // JSONManager manager;

    // 方法声明
    void cancelCallback(cocos2d::Ref* pSender);

    void createDropArea();
    void checkDropArea();

   
    // 事件监听器回调
    bool onTouchBegan(cocos2d::Touch* touch, cocos2d::Event* event);
    void onTouchMoved(cocos2d::Touch* touch, cocos2d::Event* event);
    void onTouchEnded(cocos2d::Touch* touch, cocos2d::Event* event);
    void onMouseMove(cocos2d::Event* event);


    void returnCardToOriginalPosition(Sprite* card);

    // 缩放精灵
    void scaleSprite(cardSprite* sprite, float scale);

    // 玩家管理
    void initPlayers();
    void createPlayerUI();
    void updatePlayerUI(); // 没有完成
    void switchTurn();

    // 卡牌管理
    void removeCard(cardSprite* sprite);
    void updatePlayedCardsPosition();

    // void addCardToBattlefield(int playerNumber, int cardNumber);
    void addCardToBattlefield(int playerNumber, int cardNumber);

    // 事件发送
    void sendPlayCardEvent(PlayerNumber playerNumber, CardNumber cardNumber);
    void sendTurnStartEvent();

    // Photon 事件处理
    void handlePlayCard(const ExitGames::Common::Hashtable& parameters);
    void handleTurnStart(const ExitGames::Common::Hashtable& parameters);


    // 游戏结束
    void endGame(players::Player* winner);

    // 更新逻辑
    void update(float dt) override;

    // 分发初始手牌
    void distributeInitialHands();
    void addCardToLocalPlayer(std::shared_ptr<CardBase> card);

    // 获取卡牌的费用
    int getCardCost(std::shared_ptr<CardBase> card);
    int getCardCost(int cardNumber);

    // 辅助方法：根据卡牌ID查找精灵
    cardSprite* findCardByID(int cardID);

    // 析构函数
    virtual ~BoardScene();
};

#endif // __BOARD_SCENE_H__
